{"version":3,"sources":["services/CardService.js","components/ImageInput.js","components/LabeledInput.js","stores/PlayerStore.js","components/PlayerSetup.js","pages/Home.js","components/Card.js","components/CardStack.js","components/CardZone.js","components/icons/Heart.js","components/icons/UpTriangle.js","components/icons/DownTriangle.js","components/LifeTracker.js","components/ManaTracker.js","components/ManaPool.js","components/ContextMenu.js","components/ContextContainer.js","components/ContextClickHandler.js","components/PlayerInterface.js","pages/Play.js","App.js","reportWebVitals.js","sagas/PlayerSaga.js","stores/store.js","index.js"],"names":["CardService","cmc","a","url","axios","get","result","data","name","power","toughness","text","undefined","concat","plainsImage","islandImage","swampImage","mountainImage","forestImage","wastesImage","cardBackImage","wSymbolImage","uSymbolImage","bSymbolImage","rSymbolImage","gSymbolImage","cSymbolImage","discardIcon","momirAvatarImage","ImageInput","props","src","imgSrc","alt","imgAlt","className","type","inputType","inputId","min","max","onChange","LabeledInput","htmlFor","labelId","labelText","value","inputValue","defaultState","playerName","creatures","land","lifeTotal","manaPool","white","blue","black","red","green","colorless","library","graveyard","hand","initLibrary","landCount","i","plains","push","image","isTapped","islands","swamps","mountains","forests","wastes","shuffle","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","drawCards","numCards","drawnCards","splice","newLibrary","reducer","state","action","payload","shuffledLibrary","drawResult","card","index","libary","zone","fromZone","toZone","creature","image_uris","normal","zoomImage","large","initPlayer","playLandFromHand","drawCardsFromLibrary","shuffleLibrary","incrementLife","decrementLife","updateMana","manaUpdate","toggleTapCard","sendCardToZone","fetchCreatureToken","addCreatureToBattlefield","connect","store","dispatch","PlayerStore","useState","setLandCount","setPlayerName","landInputEls","e","target","map","x","idx","to","onClick","Home","Card","id","onCardClick","CardStack","topImage","contents","isTopRevealed","onOptionsClick","CardZone","cards","Heart","xmlns","width","height","viewBox","d","fill","color","UpTriangle","DownTriangle","LifeTracker","onLifeIncrementClick","onLifeDecrementClick","ManaTracker","onIncrementClick","manaIcon","manaCount","onDecrementClick","ManaPool","incrementMana","onUpdateMana","decrementMana","ContextMenu","menuId","targetId","onMouseLeave","deactivateContext","useEffect","element","document","getElementById","addEventListener","removeEventListener","zoneMovementButtons","validMoveDestinations","sendFunction","onClose","displayName","contextHeader","ContextContainer","style","display","isActive","position","zIndex","top","mousePosition","y","offsetY","left","offsetX","ContextClickHandler","setMousePosition","zoomActive","setZoomActive","contextMenuActive","setContextMenuActive","handleContextMenu","handleElementMouseDown","handleMouseUp","ev","preventDefault","clientX","clientY","onSelectCard","button","zoomEnabled","PlayerInterface","useDispatch","player","useSelector","selectedCardIndex","setSelectedCardIndex","selectedCardZone","setSelectedCardZone","selectedCmc","setSelectedCmc","allValidMoveDestinations","sendCardTo","playLand","toggleTap","updateSelectedCard","console","log","destination","handEls","filter","cardId","creatureEls","landEls","newMana","slice","Play","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","creatureTokenSaga","cardService","call","getRandomCreature","creatureToken","put","error","takeEvery","sagaMiddleware","createSagaMiddleware","createStore","combineReducers","applyMiddleware","run","PlayerSaga","ReactDOM","render","basename","process"],"mappings":"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","file":"static/js/main.af295868.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default class CardService {\r\n\r\n    static plainsImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/c/c/cc3db531-3f21-49a2-8aeb-d98b7db94397.jpg?1597118248\";\r\n    static islandImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/9/1/91595b00-6233-48be-a012-1e87bd704aca.jpg?1597115911\";\r\n    static swampImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/8/e/8e5eef83-a3d4-44c7-a6cb-7f6803825b9e.jpg?1597116662\";\r\n    static mountainImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/6/4/6418bc71-de29-410c-baf3-f63f5615eee2.jpg?1597117048\";\r\n    static forestImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/1/4/146b803f-0455-497b-8362-03da2547070d.jpg?1597117694\";\r\n    static wastesImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/6/9/69b215fe-0d97-4ca1-9490-174220fd454b.jpg?1562916234\";\r\n    static cardBackImage = \"https://i.imgur.com/P7qYTcI.png\";\r\n    static wSymbolImage = \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/MTG_%28W%29.svg/512px-MTG_%28W%29.svg.png\";\r\n    static uSymbolImage = \"https://www.pinclipart.com/picdir/big/218-2186106_big-image-mtg-blue-mana-symbol-clipart.png\";\r\n    static bSymbolImage = \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/MTG_%28B%29.svg/512px-MTG_%28B%29.svg.png\";\r\n    static rSymbolImage = \"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/MTG_%28R%29.svg/512px-MTG_%28R%29.svg.png\";\r\n    static gSymbolImage = \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/MTG_%28G%29.svg/512px-MTG_%28G%29.svg.png\";\r\n    static cSymbolImage = \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/MTG_%28C%29.svg/500px-MTG_%28C%29.svg.png\";\r\n    static discardIcon = \"http://clipart-library.com/img1/678977.png\"\r\n\r\n    static momirAvatarImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/f/5/f5ed5ad3-b970-4720-b23b-308a25f42887.jpg?1562953277\"\r\n\r\n    async getRandomCreature(cmc){\r\n        const url = `https://api.scryfall.com/cards/random?q=cmc%3D${cmc}%20type%3Acreature%20-border%3Asilver%20-border%3Agold`\r\n        \r\n        const result = await axios.get(url);\r\n\r\n        return result.data;\r\n    }\r\n\r\n    async searchTokens(name, power, toughness, text){\r\n        let url = `https://api.scryfall.com/cards/search?include_extras=true&q=${name}%20is%3Atoken`\r\n        if(power !== undefined){\r\n            url.concat(`%20pow%3D${power}`);\r\n        }\r\n        if(toughness !== undefined){\r\n            url.concat(`%20tou%3D${toughness}`);\r\n        }\r\n        if(text !== undefined){\r\n            url.concat(`o%3A%22${text}%22`);\r\n        }\r\n\r\n        const result = await axios.get(url);\r\n\r\n        return result.data;\r\n    }\r\n}","import React from \"react\";\r\n\r\nfunction ImageInput(props) {\r\n    return(\r\n        <div>\r\n            <img src={props.imgSrc} alt={props.imgAlt} className={props.className}/>\r\n            <br />\r\n            <input\r\n                type={props.inputType}\r\n                name={props.inputId}\r\n                min={props.min}\r\n                max={props.max}\r\n                onChange={props.onChange}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageInput;","import React from \"react\";\r\n\r\nfunction LabeledInput(props) {\r\n    return(\r\n        <div className={props.className}>\r\n            <label htmlFor={props.labelId}>{props.labelText}</label>\r\n            <br />\r\n            <input \r\n                type={props.inputType}\r\n                name={props.labelId}\r\n                onChange={props.onChange}\r\n                value={props.inputValue}\r\n                ></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LabeledInput;","//ACTIONS\r\n\r\nimport CardService from \"../services/CardService\"\r\n\r\nexport const initPlayer = (landCount, playerName) => ({\r\n    type: 'INIT_PLAYER',\r\n    payload: {\r\n        landCount,\r\n        playerName\r\n    }\r\n})\r\n\r\nexport const playLandFromHand = (index) => (\r\n    {\r\n        type: 'PLAY_LAND_FROM_HAND',\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n)\r\n\r\nexport const drawCardsFromLibrary = (numCards) => (\r\n    {\r\n        type: 'DRAW_CARDS_FROM_LIBRARY',\r\n        payload: numCards\r\n    }\r\n)\r\n\r\nexport const shuffleLibrary = () => (\r\n    {\r\n        type: 'SHUFFLE_LIBRARY'\r\n    }\r\n)\r\n\r\nexport const incrementLife = () => (\r\n    {\r\n        type: 'INCREMENT_LIFE'\r\n    }\r\n)\r\n\r\nexport const decrementLife = () => (\r\n    {\r\n        type: 'DECREMENT_LIFE'\r\n    }\r\n)\r\n\r\nexport const updateMana = (manaUpdate) => (\r\n    {\r\n        type: 'UPDATE_MANA',\r\n        payload: manaUpdate\r\n    }\r\n)\r\n\r\nexport const toggleTapCard = (index, zone) => (\r\n    {\r\n        type: 'TOGGLE_TAP_CARD',\r\n        payload:{\r\n            index,\r\n            zone\r\n        }\r\n    }\r\n)\r\n\r\nexport const sendCardToZone = (index, fromZone, toZone) => (\r\n    {\r\n        type: 'SEND_CARD_TO_ZONE',\r\n        payload:{\r\n            index,\r\n            fromZone,\r\n            toZone\r\n        }\r\n    }\r\n)\r\n\r\nexport const fetchCreatureToken = (cmc) => (\r\n    {\r\n        type: 'FETCH_CREATURE_TOKEN',\r\n        payload: cmc\r\n    }\r\n)\r\n\r\nexport const addCreatureToBattlefield = (creature) => (\r\n    {\r\n        type: \"ADD_CREATURE_TO_BATTLEFIELD\",\r\n        payload: creature\r\n    }\r\n)\r\n\r\n//STATE\r\n\r\nconst defaultState = {\r\n    playerName: \"\",\r\n    creatures: [],\r\n    land: [],\r\n    lifeTotal: 24,\r\n    manaPool: {\r\n        white:0,\r\n        blue:0,\r\n        black:0,\r\n        red:0,\r\n        green:0,\r\n        colorless:0\r\n    },\r\n    library: [],\r\n    graveyard: [],\r\n    hand: []\r\n}\r\n\r\n//REDUCER\r\n\r\nconst reducer = (state = defaultState, action) => {\r\n    switch(action.type) {\r\n        case 'INIT_PLAYER':\r\n        {\r\n            const library = initLibrary(action.payload.landCount);\r\n            const shuffledLibrary = shuffle(library);\r\n            const drawResult = drawCards(shuffledLibrary, 7);\r\n            const hand = [...drawResult.drawnCards];\r\n            const graveyard = [];\r\n            const creatures = [];\r\n            const land = [];\r\n\r\n            const playerName = action.payload.playerName;\r\n\r\n            return{\r\n                ...state,\r\n                library: [...drawResult.newLibrary],\r\n                hand,\r\n                playerName,\r\n                graveyard,\r\n                creatures,\r\n                land\r\n            }\r\n        }\r\n        case 'PLAY_LAND_FROM_HAND':\r\n        {\r\n            const card = state.hand[action.payload.index];\r\n            const land = [...state.land, card];\r\n            const hand = [...state.hand];\r\n            hand.splice(action.payload.index, 1);\r\n\r\n            return{\r\n                ...state,\r\n                land,\r\n                hand\r\n            }\r\n        }\r\n        case 'DRAW_CARDS_FROM_LIBRARY':\r\n        {\r\n            const library = [...state.library];\r\n            const drawResult = drawCards(library, action.payload);\r\n            const hand = [...state.hand, ...drawResult.drawnCards];\r\n            return{\r\n                ...state,\r\n                library: drawResult.newLibrary,\r\n                hand\r\n            }\r\n        }\r\n        case 'SHUFFLE_LIBRARY':\r\n        {\r\n            const library = shuffle(state.libary);\r\n            return {\r\n                ...state,\r\n                library\r\n            };\r\n        }\r\n        case 'INCREMENT_LIFE':\r\n        {\r\n            return{\r\n                ...state,\r\n                lifeTotal: state.lifeTotal+1\r\n            }\r\n        }\r\n        case 'DECREMENT_LIFE':\r\n        {\r\n            return{\r\n                ...state,\r\n                lifeTotal: state.lifeTotal-1\r\n            }\r\n        }\r\n\r\n        case 'UPDATE_MANA':{\r\n            const manaPool = {\r\n                ...state.manaPool,\r\n                ...action.payload\r\n            }\r\n            return{\r\n                ...state,\r\n                manaPool\r\n            }\r\n        }\r\n\r\n        case 'TOGGLE_TAP_CARD':\r\n        {\r\n            switch(action.payload.zone){\r\n                case \"creatures\":{\r\n                    let creatures = [...state.creatures];\r\n                    creatures[action.payload.index].isTapped = !creatures[action.payload.index].isTapped;\r\n\r\n                    return{\r\n                        ...state,\r\n                        creatures\r\n                    }\r\n                }\r\n                case \"land\":{\r\n                    let land = [...state.land];\r\n                    land[action.payload.index].isTapped = !land[action.payload.index].isTapped;\r\n\r\n                    return{\r\n                        ...state,\r\n                        land\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case 'SEND_CARD_TO_ZONE':{\r\n            switch(action.payload.fromZone){\r\n                case \"hand\":{\r\n                    const card = state.hand[action.payload.index];\r\n                    const hand = [...state.hand];\r\n                    hand.splice(action.payload.index, 1);\r\n                    switch(action.payload.toZone){\r\n                        case \"graveyard\":{\r\n                            const graveyard = [card, ...state.graveyard];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                hand\r\n                            }\r\n                        }\r\n                        case \"land\":{\r\n                            const land = [...state.land, card];\r\n                            return{\r\n                                ...state,\r\n                                land,\r\n                                hand\r\n                            }\r\n                        }\r\n                        case \"librarytop\":{\r\n                            const library = [card, ...state.library];\r\n                            return{\r\n                                ...state,\r\n                                library,\r\n                                hand\r\n                            }\r\n                        }\r\n                        case \"librarybottom\":{\r\n                            const library = [...state.library, card];\r\n                            return{\r\n                                ...state,\r\n                                library,\r\n                                hand\r\n                            }\r\n                        }\r\n                        default: return state;\r\n                    }\r\n                }\r\n                case \"land\":{\r\n                    const card = state.land[action.payload.index];\r\n                    const land = [...state.land];\r\n                    land.splice(action.payload.index, 1);\r\n                    switch(action.payload.toZone){\r\n                        case \"graveyard\":{\r\n                            const graveyard = [card, ...state.graveyard];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                land\r\n                            }\r\n                        }\r\n                        case \"hand\":{\r\n                            const hand = [...state.hand, card];\r\n                            return{\r\n                                ...state,\r\n                                hand,\r\n                                land\r\n                            }\r\n                        }\r\n                        case \"librarytop\":{\r\n                            const library = [card, ...state.library];\r\n                            return{\r\n                                ...state,\r\n                                library,\r\n                                land\r\n                            }\r\n                        }\r\n                        case \"librarybottom\":{\r\n                            const library = [...state.library, card];\r\n                            return{\r\n                                ...state,\r\n                                library,\r\n                                land\r\n                            }\r\n                        }\r\n                        default : return state\r\n                    }\r\n                }\r\n                case \"creatures\":{\r\n                    const creatures = [...state.creatures];\r\n                    creatures.splice(action.payload.index, 1);\r\n\r\n                    return{\r\n                        ...state,\r\n                        creatures\r\n                    }\r\n                }\r\n                case \"library\":{\r\n                    const card = state.library[action.payload.index];\r\n                    const library = [...state.library];\r\n                    library.splice(action.payload.index, 1);\r\n                    switch(action.payload.toZone){\r\n                        case \"graveyard\":{\r\n                            const graveyard = [card, ...state.graveyard];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                library\r\n                            }\r\n                        }\r\n                        case \"hand\":{\r\n                            const hand = [...state.hand, card];\r\n                            return{\r\n                                ...state,\r\n                                hand,\r\n                                library\r\n                            }\r\n                        }\r\n                        case \"land\":{\r\n                            const land = [card, ...state.land];\r\n                            return{\r\n                                ...state,\r\n                                library,\r\n                                land\r\n                            }\r\n                        }\r\n                        default : return state;\r\n                    }\r\n                }\r\n                case \"graveyard\":{\r\n                    const card = state.graveyard[action.payload.index];\r\n                    const graveyard = [...state.graveyard];\r\n                    graveyard.splice(action.payload.index, 1);\r\n                    switch(action.payload.toZone){\r\n                        case \"librarytop\":{\r\n                            const library = [card, ...state.library];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                library\r\n                            }\r\n                        }\r\n                        case \"librarybottom\":{\r\n                            const library = [...state.library, card];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                library\r\n                            }\r\n                        }\r\n                        case \"hand\":{\r\n                            const hand = [...state.hand, card];\r\n                            return{\r\n                                ...state,\r\n                                hand,\r\n                                graveyard\r\n                            }\r\n                        }\r\n                        case \"land\":{\r\n                            const land = [...state.land, card];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                land\r\n                            }\r\n                        }\r\n                        default : return state;\r\n                    }\r\n                }\r\n                default: return state;\r\n            }\r\n        }\r\n        case 'FETCH_CREATURE_TOKEN':{\r\n            return{\r\n                ...state,\r\n                cmc: action.payload\r\n            }\r\n        }\r\n        case \"ADD_CREATURE_TO_BATTLEFIELD\":{\r\n            const creature = {\r\n                name: action.payload.name,\r\n                image: action.payload.image_uris.normal,\r\n                zoomImage: action.payload.image_uris.large,\r\n                isTapped: false\r\n            }\r\n            const creatures = [...state.creatures, creature];\r\n            return{\r\n                ...state,\r\n                creatures\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n};\r\n\r\nconst initLibrary = (landCount) => {\r\n    \r\n    const library = [];\r\n    \r\n    for (let i = 0; i < landCount.plains; i++){\r\n        library.push({\r\n            name: \"plains\",\r\n            image: `${CardService.plainsImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n    for (let i = 0; i < landCount.islands; i++){\r\n        library.push({\r\n            name: \"island\",\r\n            image: `${CardService.islandImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n    for (let i = 0; i < landCount.swamps; i++){\r\n        library.push({\r\n            name: \"swamp\",\r\n            image: `${CardService.swampImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n    for (let i = 0; i < landCount.mountains; i++){\r\n        library.push({\r\n            name: \"mountain\",\r\n            image: `${CardService.mountainImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n    for (let i = 0; i < landCount.forests; i++){\r\n        library.push({\r\n            name: \"forest\",\r\n            image: `${CardService.forestImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n    for (let i = 0; i < landCount.wastes; i++){\r\n        library.push({\r\n            name: \"wastes\",\r\n            image: `${CardService.wastesImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n\r\n    return library;\r\n}\r\n\r\nconst shuffle = (library) => {\r\n            \r\n    let currentIndex = library.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = library[currentIndex];\r\n        library[currentIndex] = library[randomIndex];\r\n        library[randomIndex] = temporaryValue;\r\n    }\r\n    return library;\r\n}\r\n\r\nconst drawCards = (library, numCards) => {\r\n    const drawnCards = library.splice(0, numCards);\r\n    return{\r\n        newLibrary: library,\r\n        drawnCards: drawnCards\r\n    };\r\n}\r\n\r\nexport default{\r\n    reducer,\r\n    initPlayer,\r\n    playLandFromHand,\r\n    drawCardsFromLibrary,\r\n    shuffleLibrary,\r\n    incrementLife,\r\n    decrementLife,\r\n    updateMana,\r\n    toggleTapCard,\r\n    sendCardToZone,\r\n    fetchCreatureToken,\r\n    addCreatureToBattlefield\r\n};","import React, { useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport CardService from '../services/CardService';\r\nimport ImageInput from './ImageInput';\r\nimport LabeledInput from './LabeledInput';\r\nimport PlayerStore from '../stores/PlayerStore';\r\nimport '../css/PlayerSetup.css';\r\n\r\nfunction PlayerSetup(props) {\r\n    \r\n    const [landCount, setLandCount] = useState(\r\n        {\r\n            plains: 0,\r\n            islands: 0,\r\n            swamps: 0,\r\n            mountains: 0,\r\n            forests: 0,\r\n            wastes: 0\r\n        });\r\n    const [playerName, setPlayerName] = useState(\"\");\r\n    \r\n    const onStartGame = () => {\r\n        props.onChange(landCount, playerName);\r\n    }\r\n\r\n    const landInputs = [\r\n        {\r\n            name: \"Plains\",\r\n            image: CardService.wSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, plains: e.target.value}),\r\n        },\r\n        {\r\n            name: \"Islands\",\r\n            image: CardService.uSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, islands: e.target.value}),\r\n        },\r\n        {\r\n            name: \"Swamps\",\r\n            image: CardService.bSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, swamps: e.target.value}),\r\n        },\r\n        {\r\n            name: \"Mountains\",\r\n            image: CardService.rSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, mountains: e.target.value}),\r\n        },\r\n        {\r\n            name: \"Forests\",\r\n            image: CardService.gSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, forests: e.target.value}),\r\n        },\r\n        {\r\n            name: \"Wastes\",\r\n            image: CardService.cSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, wastes: e.target.value}),\r\n        }\r\n    ]\r\n\r\n    const landInputEls = landInputs.map((x, idx) => {\r\n        return <ImageInput\r\n        key={idx}\r\n        imgSrc={x.image}\r\n        imgAlt={x.name}\r\n        inputType=\"number\"\r\n        min=\"0\"\r\n        max=\"60\"\r\n        onChange={x.onChange}\r\n        className=\"mana-symbol\" />\r\n    });\r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"player-setup-header\">Please input your name and the number of lands you would like in your deck (60 total):</div>\r\n            <div className=\"player-setup\">\r\n                <LabeledInput\r\n                labelId=\"playerName\"\r\n                labelText=\"Player Name:\" \r\n                inputType=\"text\"\r\n                onChange={(e) => setPlayerName(e.target.value)}\r\n                className=\"name-input\"/>\r\n                {landInputEls}\r\n            </div>\r\n            <Link to=\"/play\">\r\n                <button type=\"button\" onClick={onStartGame}>Start Game!</button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        onChange: (landCount, playerName) => dispatch(PlayerStore.initPlayer(landCount, playerName))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerSetup);","import React from 'react'\r\nimport PlayerSetup from '../components/PlayerSetup'\r\nimport '../css/Home.css'\r\n\r\nfunction Home(props) {\r\n    return (\r\n        <div className=\"home\">\r\n            <h2>Welcome to Momir Basic</h2>\r\n            <PlayerSetup />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction Card(props) {\r\n\r\n    const handleCardClick = () => {\r\n        props.onCardClick(props.index, props.zone)\r\n    }\r\n\r\n    return (\r\n        <div id={props.id} className={\"card\" + (props.isTapped ? \" tapped\" : \"\")}>\r\n            <img src={props.imgSrc} alt={props.name} onClick={handleCardClick}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport CardService from '../services/CardService';\r\nimport Card from './Card';\r\n\r\nfunction CardStack(props){\r\n    let topImage = undefined;\r\n    if(props.contents.length > 0){\r\n        topImage = (props.isTopRevealed && props.contents[0].image !== undefined) ? props.contents[0].image : CardService.cardBackImage;\r\n    }\r\n    return(\r\n        <div id={props.id}>\r\n            <Card \r\n                imgSrc={topImage}\r\n                alt={props.name}\r\n                zone={props.name}\r\n                index=\"0\"\r\n                name={(props.contents.length > 0 && props.contents[0].name !== undefined) ? props.contents[0].name : \"\"}\r\n                onCardClick={props.contents.length > 0 ? props.onClick : () => { return }}\r\n                onOptionsClick={props.contents.length > 0 ? props.onOptionsClick : () => { return }}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardStack;","import React from 'react';\r\n\r\nfunction CardZone(props){\r\n    return(\r\n        <div className={\"cardZone \"+props.name}>{props.cards}</div>\r\n    );\r\n}\r\n\r\nexport default CardZone;","import React from 'react'\r\n\r\nfunction Heart(props){\r\n    return(\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props.width} height={props.height} viewBox=\"0 0 200 200\">\r\n            <path d=\"M65 29c-6-10-16-17-28-17C20 12 7 25 7 42c0 33 18 38 58 76 40-38 58-43 58-76 0-17-13-30-30-30-12 0-22 7-28 17z\" fill={props.color}/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default Heart;","import React from 'react'\r\n\r\nfunction UpTriangle(props){\r\n    return(\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={props.width}\r\n        height={props.height}\r\n        fill={props.color}\r\n        viewBox=\"0 0 481.72 481.721\">\r\n            <path d=\"M471.253 335.129L272.396 82.226c-17.417-30.533-45.661-30.533-63.078 0L10.473 335.098c-3.88 5.533-8.072 15.41-8.917 22.117-2.736 21.738-4.908 65.18 21.444 65.18h435.707c26.353 0 24.192-43.416 21.463-65.148-.844-6.714-5.031-16.579-8.917-22.118z\"/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default UpTriangle;\r\n","import React from 'react'\r\n\r\nfunction DownTriangle(props){\r\n    return(\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={props.width}\r\n        height={props.height}\r\n        fill = {props.color}\r\n        viewBox=\"0 0 481.728 481.728\">\r\n            <path d=\"M10.467 146.592l198.857 252.903c17.417 30.532 45.661 30.532 63.085 0l198.839-252.867c3.886-5.532 8.072-15.41 8.923-22.118 2.735-21.738 4.908-65.178-21.444-65.178H23.013c-26.353 0-24.192 43.415-21.463 65.147.845 6.709 5.037 16.581 8.917 22.113z\"/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default DownTriangle;","import React from 'react';\r\nimport Heart from './icons/Heart';\r\nimport UpTriangle from './icons/UpTriangle';\r\nimport DownTriangle from './icons/DownTriangle';\r\n\r\nfunction LifeTracker (props){\r\n    return (\r\n        <div className=\"life-tracker-container\">\r\n            <div className=\"life-display\">\r\n                <Heart width=\"160\" height=\"160\" color=\"#ff0707\"/>\r\n                <div className=\"life-display-text\">\r\n                    {props.lifeTotal}\r\n                </div>\r\n            </div>\r\n            <div className=\"life-button-container\">\r\n                <button onClick={props.onLifeIncrementClick}>\r\n                    <UpTriangle width=\"40\" height=\"40\" color=\"white\"/>\r\n                </button>\r\n                <button onClick={props.onLifeDecrementClick}>\r\n                    <DownTriangle width=\"40\" height=\"40\" color=\"white\"/>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LifeTracker;","import React from 'react';\r\nimport UpTriangle from './icons/UpTriangle';\r\nimport DownTriangle from './icons/DownTriangle';\r\n\r\nfunction ManaTracker(props){\r\n    return (\r\n        <div className=\"mana-tracker-container\">\r\n            \r\n            <button className=\"mana-tracker-button\" onClick={props.onIncrementClick}>\r\n                <UpTriangle width=\"25\" height=\"25\" color=\"white\"/>\r\n            </button>\r\n            <div className=\"mana-count-container\">\r\n                <img src={props.manaIcon} alt=\"\"/>\r\n                <div className=\"mana-count\">\r\n                    {props.manaCount}\r\n                </div>\r\n            </div>\r\n            <button className=\"mana-tracker-button\" onClick={props.onDecrementClick}>\r\n                <DownTriangle width=\"25\" height=\"25\" color=\"white\"/>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ManaTracker;","import React from 'react';\r\nimport CardService from '../services/CardService';\r\nimport ManaTracker from './ManaTracker';\r\n\r\nfunction ManaPool(props){\r\n\r\n    const incrementMana = (color) => {\r\n        let manaUpdate = {};\r\n        manaUpdate[color] = props[color] + 1;\r\n        props.onUpdateMana(manaUpdate);\r\n    }\r\n\r\n    const decrementMana = (color) => {\r\n        let manaUpdate = {};\r\n        manaUpdate[color] = Math.max(0, props[color] - 1);\r\n        props.onUpdateMana(manaUpdate);\r\n    }\r\n\r\n    const clearMana = () => {\r\n        let manaUpdate = {\r\n            white: 0,\r\n            blue: 0,\r\n            black: 0,\r\n            red: 0,\r\n            green: 0,\r\n            colorless: 0\r\n        }\r\n        props.onUpdateMana(manaUpdate);\r\n    }\r\n\r\n    return(\r\n        <div className=\"mana-pool-container\">\r\n            <ManaTracker manaIcon={CardService.wSymbolImage} manaCount={props.white} onIncrementClick={() => incrementMana(\"white\")} onDecrementClick={() => decrementMana(\"white\")}/>\r\n            <ManaTracker manaIcon={CardService.uSymbolImage} manaCount={props.blue} onIncrementClick={() => incrementMana(\"blue\")} onDecrementClick={() => decrementMana(\"blue\")}/>\r\n            <ManaTracker manaIcon={CardService.bSymbolImage} manaCount={props.black} onIncrementClick={() => incrementMana(\"black\")} onDecrementClick={() => decrementMana(\"black\")}/>\r\n            <ManaTracker manaIcon={CardService.rSymbolImage} manaCount={props.red} onIncrementClick={() => incrementMana(\"red\")} onDecrementClick={() => decrementMana(\"red\")}/>\r\n            <ManaTracker manaIcon={CardService.gSymbolImage} manaCount={props.green} onIncrementClick={() => incrementMana(\"green\")} onDecrementClick={() => decrementMana(\"green\")}/>\r\n            <ManaTracker manaIcon={CardService.cSymbolImage} manaCount={props.colorless} onIncrementClick={() => incrementMana(\"colorless\")} onDecrementClick={() => decrementMana(\"colorless\")}/>\r\n            <button onClick={() => clearMana()}>CLEAR</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManaPool;","import React, { useEffect } from 'react';\r\n\r\nfunction ContextMenu(props){\r\n\r\n    const menuId = props.targetId + \"_contextMenu\";\r\n\r\n    const onMouseLeave = () => {\r\n        props.deactivateContext();\r\n    }\r\n\r\n    useEffect(() => {\r\n        let element = document.getElementById(menuId);\r\n        element.addEventListener(\"mouseleave\", onMouseLeave);\r\n\r\n        return () => {\r\n            element.removeEventListener(\"mouseleave\", onMouseLeave);\r\n        }\r\n    });\r\n\r\n    const zoneMovementButtons = props.validMoveDestinations.map((x, idx) => {\r\n        const onClick = () => {\r\n            x.sendFunction();\r\n            props.onClose();\r\n        }\r\n        return <button key={idx} onClick={onClick}>{x.displayName}</button>\r\n    });\r\n    return (\r\n        <div id={menuId} className=\"right-click-context\">\r\n            <div>{props.contextHeader}</div>\r\n            {zoneMovementButtons}\r\n            <br />\r\n            <br />\r\n            <button onClick={props.onClose}>Close</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContextMenu;","import React from 'react'\r\n\r\nfunction ContextContainer (props){\r\n    return (\r\n        <div \r\n            style={{\r\n            display: props.isActive ? 'block' : 'none',\r\n            position: 'fixed',\r\n            zIndex: 10,\r\n            top: props.mousePosition.y + (props.offsetY ?? 0),\r\n            left: props.mousePosition.x + (props.offsetX ?? 0),\r\n            ...props.style\r\n            }}>\r\n                {props.contents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContextContainer;","import React, { useState, useEffect } from 'react';\r\nimport ContextMenu from './ContextMenu';\r\nimport ContextContainer from './ContextContainer';\r\n\r\nfunction ContextClickHandler (props) {\r\n    \r\n\r\n    const [mousePosition, setMousePosition] = useState(\r\n        {\r\n            x: null,\r\n            y: null\r\n        });\r\n\r\n    const [zoomActive, setZoomActive] = useState(false);\r\n    const [contextMenuActive, setContextMenuActive] = useState(false); \r\n\r\n    useEffect(() => {\r\n        \r\n        let element = document.getElementById(props.targetId);\r\n        element.addEventListener(\"contextmenu\", handleContextMenu);\r\n        element.addEventListener(\"mousedown\", handleElementMouseDown);\r\n        document.addEventListener(\"mouseup\", handleMouseUp);\r\n\r\n        return () => {\r\n            element.removeEventListener(\"mousedown\", handleElementMouseDown);\r\n            document.removeEventListener(\"mouseup\", handleMouseUp);\r\n            element.removeEventListener(\"contextmenu\", handleContextMenu);\r\n        }\r\n    });\r\n\r\n    const handleContextMenu = (ev) =>{\r\n        ev.preventDefault();\r\n        setMousePosition({ x: ev.clientX, y: ev.clientY });\r\n        props.onSelectCard();\r\n        setContextMenuActive(true);\r\n        const menuId = props.targetId + \"_contextMenu\";\r\n        let menuElement = document.getElementById(menuId);\r\n        menuElement.addEventListener(\"mouseleave\", deactivateContext);\r\n    }\r\n\r\n    const handleElementMouseDown = (ev) => {\r\n        switch (ev.button){\r\n            case 0:{\r\n                if(contextMenuActive)\r\n                    setContextMenuActive(false);\r\n                return;\r\n            }\r\n            case 1:{\r\n                setMousePosition({ x: ev.clientX, y: ev.clientY });\r\n                if(props.zoomEnabled){\r\n                    ev.preventDefault();\r\n                    setZoomActive(true);\r\n                }\r\n                return;\r\n            }\r\n            case 2:{\r\n                return;\r\n            }\r\n            default: return;\r\n        }\r\n    }\r\n\r\n    const handleMouseUp = (ev) => {\r\n        switch(ev.button){\r\n            case 1:{\r\n                if(props.zoomEnabled){\r\n                    ev.preventDefault();\r\n                    setZoomActive(false);\r\n                }\r\n                break;\r\n            }\r\n            default: return;\r\n        }\r\n    }\r\n\r\n    const deactivateContext = (ev) => {\r\n        if(zoomActive)\r\n            setZoomActive(false);\r\n        if(contextMenuActive)\r\n            setContextMenuActive(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.contents}\r\n            <ContextContainer\r\n                mousePosition={mousePosition}\r\n                isActive={zoomActive}\r\n                contents={<img id={props.targetId+\"_zoomed\"} className=\"zoomImage\" src={props.zoomImage} alt=\"\"/>}\r\n            />\r\n            <ContextContainer \r\n                mousePosition={mousePosition}\r\n                isActive={contextMenuActive}\r\n                contents={<ContextMenu \r\n                    contextHeader={props.contextHeader}\r\n                    validMoveDestinations={props.validMoveDestinations}\r\n                    targetId={props.targetId}\r\n                    deactivateContext={() => deactivateContext()} \r\n                    onClose={() => setContextMenuActive(false)}/>}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContextClickHandler;","import React, { useState } from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport Card from './Card';\r\nimport CardStack from './CardStack';\r\nimport CardZone from './CardZone';\r\nimport LifeTracker from './LifeTracker';\r\nimport ManaPool from './ManaPool';\r\nimport PlayerStore from '../stores/PlayerStore';\r\n\r\nimport '../css/PlayerInterface.css';\r\nimport CardService from '../services/CardService';\r\nimport ContextClickHandler from './ContextClickHandler';\r\n\r\nfunction PlayerInterface (props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const player = useSelector(store => store.player);\r\n\r\n    const [selectedCardIndex, setSelectedCardIndex] = useState(0);\r\n    const [selectedCardZone, setSelectedCardZone] = useState('');\r\n    const [selectedCmc, setSelectedCmc] = useState(0);\r\n    \r\n    const allValidMoveDestinations = [\r\n        {\r\n            name: \"hand\",\r\n            displayName: \"Hand\",\r\n            sendFunction: () => sendCardTo(\"hand\")\r\n        },\r\n        {\r\n            name: \"graveyard\",\r\n            displayName: \"Graveyard\",\r\n            sendFunction:  () => sendCardTo(\"graveyard\")\r\n        },\r\n        {\r\n            name: \"librarytop\",\r\n            displayName: \"Top of Library\",\r\n            sendFunction:  () => sendCardTo(\"librarytop\")\r\n        },\r\n        {\r\n            name: \"librarybottom\",\r\n            displayName: \"Bottom of Library\",\r\n            sendFunction:  () => sendCardTo(\"librarybottom\")\r\n        },\r\n        {\r\n            name: \"creatures\",\r\n            displayName: \"Battlefield\",\r\n            sendFunction:  () => sendCardTo(\"creatures\")\r\n        },\r\n        {\r\n            name: \"lands\",\r\n            displayName: \"Battlefield\",\r\n            sendFunction:  () => sendCardTo(\"land\")\r\n        }\r\n    ];\r\n\r\n    const onLifeIncrementClick = () => {\r\n        dispatch(PlayerStore.incrementLife());\r\n    }\r\n\r\n    const onLifeDecrementClick = () => {\r\n        dispatch(PlayerStore.decrementLife());\r\n    }\r\n\r\n    const onUpdateMana = (newMana) => {\r\n        dispatch(PlayerStore.updateMana(newMana));\r\n    }\r\n\r\n    const playLand = (index) => {\r\n        dispatch(PlayerStore.playLandFromHand(index));\r\n    }\r\n\r\n    const drawCard = () =>{\r\n        dispatch(PlayerStore.drawCardsFromLibrary(1));\r\n    }\r\n\r\n    const toggleTap = (index, zone) => {\r\n        dispatch(PlayerStore.toggleTapCard(index, zone));\r\n    }\r\n\r\n    const updateSelectedCard = (index, zone) => {\r\n        console.log(`Updating selection - index: ${index} zone: ${zone}`);\r\n        setSelectedCardIndex(index);\r\n        setSelectedCardZone(zone);\r\n    } \r\n\r\n    const sendCardTo = (destination) => {\r\n        console.log(`Sending card to ${destination}... Source - index: ${selectedCardIndex} zone: ${selectedCardZone}`);\r\n        dispatch(PlayerStore.sendCardToZone(selectedCardIndex, selectedCardZone, destination));\r\n    }\r\n\r\n    const fetchTokenCreature = () => {\r\n        dispatch(PlayerStore.fetchCreatureToken(selectedCmc));\r\n    }\r\n\r\n    const handEls = player.hand.filter(x => x !== undefined).map((x, idx) => {\r\n        let cardId = x.name+'_'+idx;\r\n        let validMoveDestinations = [...allValidMoveDestinations];\r\n        validMoveDestinations.splice(0,1);\r\n        validMoveDestinations.splice(3,1);\r\n        return <ContextClickHandler\r\n                key={idx}\r\n                contents={<Card key={idx} id={cardId} index={idx} imgSrc={x.image} name={x.name} zone=\"hand\" onCardClick={playLand} isTapped={x.isTapped}/>}\r\n                zoomEnabled={false}\r\n                targetId={cardId}\r\n                validMoveDestinations={validMoveDestinations}\r\n                contextHeader=\"Send Card To...\"\r\n                onSelectCard={() => updateSelectedCard(idx, \"hand\")}\r\n        />\r\n    })\r\n    const creatureEls = player.creatures.filter(x => x !== undefined).map((x, idx) => {\r\n            let cardId = x.name+'_'+idx;\r\n            let validMoveDestinations = [...allValidMoveDestinations];\r\n            validMoveDestinations.splice(4,2);\r\n            return <ContextClickHandler\r\n                    key={idx}\r\n                    contents={<Card key={idx} id={cardId} index={idx} imgSrc={x.image} name={x.name} zone=\"creatures\" onCardClick={toggleTap} isTapped={x.isTapped}/>}\r\n                    zoomEnabled={true}\r\n                    zoomImage={x.zoomImage}\r\n                    targetId={cardId}\r\n                    validMoveDestinations={validMoveDestinations}\r\n                    contextHeader=\"Send Card To...\"\r\n                    onSelectCard={() =>updateSelectedCard(idx, \"creatures\")}\r\n            />\r\n    })\r\n    const landEls = player.land.filter(x => x !== undefined).map((x, idx) => {\r\n        let cardId = x.name+'_'+idx;\r\n        let validMoveDestinations = [...allValidMoveDestinations];\r\n        validMoveDestinations.splice(4,2);\r\n        return <ContextClickHandler\r\n                key={idx}\r\n                contents={<Card key={idx} id={cardId} index={idx} imgSrc={x.image} name={x.name} zone=\"land\" onCardClick={toggleTap} isTapped={x.isTapped}/>}\r\n                zoomEnabled={false}\r\n                targetId={cardId}\r\n                validMoveDestinations={validMoveDestinations}\r\n                contextHeader=\"Send Card To...\"\r\n                onSelectCard={() =>updateSelectedCard(idx, \"land\")}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div id=\"playerInterface\" className=\"playerInterface\">\r\n            <div className=\"battlefield\">\r\n                <CardZone cards={creatureEls} name=\"battlefield-creatures\"/>\r\n                <div className=\"land-row-container\">\r\n                    <div className=\"card momir-container\">\r\n                        <img src={CardService.momirAvatarImage} alt=\"Momir Vanguard\"/>\r\n                        <div className=\"momir-input-container\">\r\n                            <div className=\"momir-rules\">\r\n                                <span>X, Discard a card:</span>\r\n                                <br />\r\n                                <span>Create a token that’s a copy of a creature card with converted mana cost X chosen at random. Activate this ability only any time you could cast a sorcery and only once each turn.</span>\r\n                            </div>\r\n                            <div className=\"momir-input\">\r\n                                <span>X:</span>\r\n                                <input type=\"number\" min=\"0\" onChange={(e) => setSelectedCmc(e.target.value)}></input>\r\n                                <button onClick={fetchTokenCreature}>Create Token!</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <CardZone cards={landEls} name=\"battlefield-land\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"playerSpace\">\r\n                <div className=\"playerStats\">\r\n                    <LifeTracker\r\n                        lifeTotal={player.lifeTotal}\r\n                        onLifeIncrementClick = {onLifeIncrementClick}\r\n                        onLifeDecrementClick = {onLifeDecrementClick}\r\n                    />\r\n                    <ManaPool\r\n                        white={player.manaPool.white}\r\n                        blue={player.manaPool.blue}\r\n                        black={player.manaPool.black}\r\n                        red={player.manaPool.red}\r\n                        green={player.manaPool.green}\r\n                        colorless={player.manaPool.colorless}\r\n                        onUpdateMana={onUpdateMana}/>\r\n                </div>\r\n                <CardZone name=\"hand\" cards={handEls}/>\r\n                <ContextClickHandler\r\n                contents={<CardStack id={\"library_top\"} name=\"library\" contents={player.library} isTopRevealed={false} onClick={drawCard} />}\r\n                zoomEnabled={false}\r\n                targetId={\"library_top\"}\r\n                validMoveDestinations={[...allValidMoveDestinations.slice(0,1), ...allValidMoveDestinations.slice(3,4), ...allValidMoveDestinations.slice(5)]}\r\n                contextHeader=\"Send Card To...\"\r\n                onSelectCard={() => updateSelectedCard(0, \"library\")}\r\n                />\r\n                <ContextClickHandler\r\n                contents={<CardStack id={\"graveyard_top\"} name=\"graveyard\" contents={player.graveyard} isTopRevealed={true}/>}\r\n                zoomEnabled={false}\r\n                targetId={\"graveyard_top\"}\r\n                validMoveDestinations={[...allValidMoveDestinations.slice(0,0), ...allValidMoveDestinations.slice(2,4), ...allValidMoveDestinations.slice(5)]}\r\n                contextHeader=\"Send Card To...\"\r\n                onSelectCard={() => updateSelectedCard(0, \"graveyard\")}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerInterface;","import React from 'react'\r\nimport PlayerInterface from '../components/PlayerInterface';\r\n\r\nfunction Play(props) {\r\n    return (\r\n        <div>\r\n            <PlayerInterface />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Play;","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport Home from './pages/Home';\nimport Play from './pages/Play';\n\nfunction App() {\n  return (\n    <div id=\"App\" className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/play\">\n            <Play />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {call, put, takeEvery} from 'redux-saga/effects';\r\nimport CardService from '../services/CardService';\r\n\r\nconst cardService = new CardService();\r\n\r\nfunction* fetchCreatureToken(action) {\r\n    try{\r\n        const creatureToken = yield call(cardService.getRandomCreature, action.payload);\r\n        yield put({type: 'ADD_CREATURE_TO_BATTLEFIELD', payload: creatureToken});\r\n    } catch(e){\r\n        console.error('ERROR FETCHING CREATURE TOKEN!!!');\r\n    }\r\n}\r\n\r\nfunction* creatureTokenSaga(){\r\n    yield takeEvery('FETCH_CREATURE_TOKEN', fetchCreatureToken);\r\n}\r\n\r\nexport default creatureTokenSaga;","\r\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport PlayerStore from './PlayerStore';\r\n \r\nimport createSagaMiddleware from 'redux-saga';\r\nimport PlayerSaga from '../sagas/PlayerSaga';\r\n \r\nconst sagaMiddleware = createSagaMiddleware();\r\n \r\nconst store = createStore(\r\n    combineReducers({\r\n        player: PlayerStore.reducer\r\n    }),\r\n    applyMiddleware(sagaMiddleware)\r\n);\r\n \r\nsagaMiddleware.run(PlayerSaga);\r\n \r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {Provider} from 'react-redux';\nimport store from './stores/store';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}