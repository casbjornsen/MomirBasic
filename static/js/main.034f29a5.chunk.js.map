{"version":3,"sources":["services/CardService.js","components/ImageInput.js","components/LabeledInput.js","stores/PlayerStore.js","components/PlayerSetup.js","pages/Home.js","components/CardOptionsButton.js","components/Card.js","components/CardStack.js","components/CardZone.js","components/icons/Heart.js","components/icons/UpTriangle.js","components/icons/DownTriangle.js","components/LifeTracker.js","components/ManaTracker.js","components/ManaPool.js","components/PlayerInterface.js","pages/Play.js","App.js","reportWebVitals.js","sagas/PlayerSaga.js","stores/store.js","index.js"],"names":["CardService","cmc","a","url","axios","get","result","data","name","power","toughness","text","undefined","concat","plainsImage","islandImage","swampImage","mountainImage","forestImage","wastesImage","cardBackImage","wSymbolImage","uSymbolImage","bSymbolImage","rSymbolImage","gSymbolImage","cSymbolImage","discardIcon","momirAvatarImage","ImageInput","props","src","imgSrc","alt","imgAlt","className","type","inputType","inputId","min","max","onChange","LabeledInput","htmlFor","labelId","labelText","value","inputValue","defaultState","playerName","creatures","land","lifeTotal","manaPool","white","blue","black","red","green","colorless","library","graveyard","hand","initLibrary","landCount","i","plains","push","image","isTapped","islands","swamps","mountains","forests","wastes","shuffle","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","drawCards","numCards","drawnCards","splice","newLibrary","reducer","state","action","payload","shuffledLibrary","drawResult","card","index","libary","zone","fromZone","toZone","creature","image_uris","normal","initPlayer","playLandFromHand","drawCardsFromLibrary","shuffleLibrary","incrementLife","decrementLife","updateMana","manaUpdate","toggleTapCard","sendCardToZone","fetchCreatureToken","addCreatureToBattlefield","connect","store","dispatch","PlayerStore","useState","setLandCount","setPlayerName","landInputEls","e","target","map","x","idx","to","onClick","Home","CardOptionsButton","Card","onOptionsClick","onCardClick","CardStack","topImage","contents","isTopRevealed","CardZone","cards","Heart","xmlns","width","height","viewBox","d","fill","color","UpTriangle","DownTriangle","LifeTracker","onLifeIncrementClick","onLifeDecrementClick","ManaTracker","onIncrementClick","manaIcon","manaCount","onDecrementClick","ManaPool","incrementMana","onUpdateMana","decrementMana","player","creaturesInPlay","landInPlay","onIncrementLife","onDecrementLife","mana","onPlayLand","onDrawCard","onToggleTap","modalIsOpen","setModalIsOpen","selectedCardIndex","setSelectedCardIndex","selectedCardZone","setSelectedCardZone","selectedCmc","setSelectedCmc","playLand","toggleTap","sendCardTo","destination","handEls","creatureEls","landEls","id","isOpen","appElement","document","getElementById","overlayClassName","newMana","Play","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","creatureTokenSaga","cardService","call","getRandomCreature","creatureToken","put","console","error","takeEvery","sagaMiddleware","createSagaMiddleware","createStore","combineReducers","applyMiddleware","run","PlayerSaga","ReactDOM","render","basename","process"],"mappings":"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","file":"static/js/main.034f29a5.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default class CardService {\r\n\r\n    static plainsImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/c/c/cc3db531-3f21-49a2-8aeb-d98b7db94397.jpg?1597118248\";\r\n    static islandImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/9/1/91595b00-6233-48be-a012-1e87bd704aca.jpg?1597115911\";\r\n    static swampImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/8/e/8e5eef83-a3d4-44c7-a6cb-7f6803825b9e.jpg?1597116662\";\r\n    static mountainImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/6/4/6418bc71-de29-410c-baf3-f63f5615eee2.jpg?1597117048\";\r\n    static forestImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/1/4/146b803f-0455-497b-8362-03da2547070d.jpg?1597117694\";\r\n    static wastesImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/6/9/69b215fe-0d97-4ca1-9490-174220fd454b.jpg?1562916234\";\r\n    static cardBackImage = \"https://i.imgur.com/P7qYTcI.png\";\r\n    static wSymbolImage = \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/MTG_%28W%29.svg/512px-MTG_%28W%29.svg.png\";\r\n    static uSymbolImage = \"https://www.pinclipart.com/picdir/big/218-2186106_big-image-mtg-blue-mana-symbol-clipart.png\";\r\n    static bSymbolImage = \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e4/MTG_%28B%29.svg/512px-MTG_%28B%29.svg.png\";\r\n    static rSymbolImage = \"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/MTG_%28R%29.svg/512px-MTG_%28R%29.svg.png\";\r\n    static gSymbolImage = \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/MTG_%28G%29.svg/512px-MTG_%28G%29.svg.png\";\r\n    static cSymbolImage = \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/MTG_%28C%29.svg/500px-MTG_%28C%29.svg.png\";\r\n    static discardIcon = \"http://clipart-library.com/img1/678977.png\"\r\n\r\n    static momirAvatarImage = \"https://c1.scryfall.com/file/scryfall-cards/large/front/f/5/f5ed5ad3-b970-4720-b23b-308a25f42887.jpg?1562953277\"\r\n\r\n    async getRandomCreature(cmc){\r\n        const url = `https://api.scryfall.com/cards/random?q=cmc%3D${cmc}%20type%3Acreature`\r\n        \r\n        const result = await axios.get(url);\r\n\r\n        return result.data;\r\n    }\r\n\r\n    async searchTokens(name, power, toughness, text){\r\n        let url = `https://api.scryfall.com/cards/search?include_extras=true&q=${name}%20is%3Atoken`\r\n        if(power !== undefined){\r\n            url.concat(`%20pow%3D${power}`);\r\n        }\r\n        if(toughness !== undefined){\r\n            url.concat(`%20tou%3D${toughness}`);\r\n        }\r\n        if(text !== undefined){\r\n            url.concat(`o%3A%22${text}%22`);\r\n        }\r\n\r\n        const result = await axios.get(url);\r\n\r\n        return result.data;\r\n    }\r\n}","import React from \"react\";\r\n\r\nfunction ImageInput(props) {\r\n    return(\r\n        <div>\r\n            <img src={props.imgSrc} alt={props.imgAlt} className={props.className}/>\r\n            <br />\r\n            <input\r\n                type={props.inputType}\r\n                name={props.inputId}\r\n                min={props.min}\r\n                max={props.max}\r\n                onChange={props.onChange}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageInput;","import React from \"react\";\r\n\r\nfunction LabeledInput(props) {\r\n    return(\r\n        <div className={props.className}>\r\n            <label htmlFor={props.labelId}>{props.labelText}</label>\r\n            <br />\r\n            <input \r\n                type={props.inputType}\r\n                name={props.labelId}\r\n                onChange={props.onChange}\r\n                value={props.inputValue}\r\n                ></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LabeledInput;","//ACTIONS\r\n\r\nimport CardService from \"../services/CardService\"\r\n\r\nexport const initPlayer = (landCount, playerName) => ({\r\n    type: 'INIT_PLAYER',\r\n    payload: {\r\n        landCount,\r\n        playerName\r\n    }\r\n})\r\n\r\nexport const playLandFromHand = (index) => (\r\n    {\r\n        type: 'PLAY_LAND_FROM_HAND',\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n)\r\n\r\nexport const drawCardsFromLibrary = (numCards) => (\r\n    {\r\n        type: 'DRAW_CARDS_FROM_LIBRARY',\r\n        payload: numCards\r\n    }\r\n)\r\n\r\nexport const shuffleLibrary = () => (\r\n    {\r\n        type: 'SHUFFLE_LIBRARY'\r\n    }\r\n)\r\n\r\nexport const incrementLife = () => (\r\n    {\r\n        type: 'INCREMENT_LIFE'\r\n    }\r\n)\r\n\r\nexport const decrementLife = () => (\r\n    {\r\n        type: 'DECREMENT_LIFE'\r\n    }\r\n)\r\n\r\nexport const updateMana = (manaUpdate) => (\r\n    {\r\n        type: 'UPDATE_MANA',\r\n        payload: manaUpdate\r\n    }\r\n)\r\n\r\nexport const toggleTapCard = (index, zone) => (\r\n    {\r\n        type: 'TOGGLE_TAP_CARD',\r\n        payload:{\r\n            index,\r\n            zone\r\n        }\r\n    }\r\n)\r\n\r\nexport const sendCardToZone = (index, fromZone, toZone) => (\r\n    {\r\n        type: 'SEND_CARD_TO_ZONE',\r\n        payload:{\r\n            index,\r\n            fromZone,\r\n            toZone\r\n        }\r\n    }\r\n)\r\n\r\nexport const fetchCreatureToken = (cmc) => (\r\n    {\r\n        type: 'FETCH_CREATURE_TOKEN',\r\n        payload: cmc\r\n    }\r\n)\r\n\r\nexport const addCreatureToBattlefield = (creature) => (\r\n    {\r\n        type: \"ADD_CREATURE_TO_BATTLEFIELD\",\r\n        payload: creature\r\n    }\r\n)\r\n\r\n//STATE\r\n\r\nconst defaultState = {\r\n    playerName: \"\",\r\n    creatures: [],\r\n    land: [],\r\n    lifeTotal: 24,\r\n    manaPool: {\r\n        white:0,\r\n        blue:0,\r\n        black:0,\r\n        red:0,\r\n        green:0,\r\n        colorless:0\r\n    },\r\n    library: [],\r\n    graveyard: [],\r\n    hand: []\r\n}\r\n\r\n//REDUCER\r\n\r\nconst reducer = (state = defaultState, action) => {\r\n    switch(action.type) {\r\n        case 'INIT_PLAYER':\r\n        {\r\n            const library = initLibrary(action.payload.landCount);\r\n            const shuffledLibrary = shuffle(library);\r\n            const drawResult = drawCards(shuffledLibrary, 7);\r\n            const hand = [...drawResult.drawnCards];\r\n            const graveyard = [];\r\n            const creatures = [];\r\n            const land = [];\r\n\r\n            const playerName = action.payload.playerName;\r\n\r\n            return{\r\n                ...state,\r\n                library: [...drawResult.newLibrary],\r\n                hand,\r\n                playerName,\r\n                graveyard,\r\n                creatures,\r\n                land\r\n            }\r\n        }\r\n        case 'PLAY_LAND_FROM_HAND':\r\n        {\r\n            const card = state.hand[action.payload.index];\r\n            const land = [...state.land, card];\r\n            const hand = [...state.hand];\r\n            hand.splice(action.payload.index, 1);\r\n\r\n            return{\r\n                ...state,\r\n                land,\r\n                hand\r\n            }\r\n        }\r\n        case 'DRAW_CARDS_FROM_LIBRARY':\r\n        {\r\n            const library = [...state.library];\r\n            const drawResult = drawCards(library, action.payload);\r\n            const hand = [...state.hand, ...drawResult.drawnCards];\r\n            return{\r\n                ...state,\r\n                library: drawResult.newLibrary,\r\n                hand\r\n            }\r\n        }\r\n        case 'SHUFFLE_LIBRARY':\r\n        {\r\n            const library = shuffle(state.libary);\r\n            return {\r\n                ...state,\r\n                library\r\n            };\r\n        }\r\n        case 'INCREMENT_LIFE':\r\n        {\r\n            return{\r\n                ...state,\r\n                lifeTotal: state.lifeTotal+1\r\n            }\r\n        }\r\n        case 'DECREMENT_LIFE':\r\n        {\r\n            return{\r\n                ...state,\r\n                lifeTotal: state.lifeTotal-1\r\n            }\r\n        }\r\n\r\n        case 'UPDATE_MANA':{\r\n            const manaPool = {\r\n                ...state.manaPool,\r\n                ...action.payload\r\n            }\r\n            return{\r\n                ...state,\r\n                manaPool\r\n            }\r\n        }\r\n\r\n        case 'TOGGLE_TAP_CARD':\r\n        {\r\n            switch(action.payload.zone){\r\n                case \"creatures\":{\r\n                    let creatures = [...state.creatures];\r\n                    creatures[action.payload.index].isTapped = !creatures[action.payload.index].isTapped;\r\n\r\n                    return{\r\n                        ...state,\r\n                        creatures\r\n                    }\r\n                }\r\n                case \"land\":{\r\n                    let land = [...state.land];\r\n                    land[action.payload.index].isTapped = !land[action.payload.index].isTapped;\r\n\r\n                    return{\r\n                        ...state,\r\n                        land\r\n                    }\r\n                }\r\n                default: return state\r\n            }\r\n        }\r\n        case 'SEND_CARD_TO_ZONE':{\r\n            switch(action.payload.fromZone){\r\n                case \"hand\":{\r\n                    const card = state.hand[action.payload.index];\r\n                    const hand = [...state.hand];\r\n                    hand.splice(action.payload.index, 1);\r\n                    switch(action.payload.toZone){\r\n                        case \"graveyard\":{\r\n                            const graveyard = [card, ...state.graveyard];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                hand\r\n                            }\r\n                        }\r\n                        case \"land\":{\r\n                            const land = [...state.land, card];\r\n                            return{\r\n                                ...state,\r\n                                land,\r\n                                hand\r\n                            }\r\n                        }\r\n                        case \"librarytop\":{\r\n                            const library = [card, ...state.library];\r\n                            return{\r\n                                ...state,\r\n                                library,\r\n                                hand\r\n                            }\r\n                        }\r\n                        case \"librarybottom\":{\r\n                            const library = [...state.library, card];\r\n                            return{\r\n                                ...state,\r\n                                library,\r\n                                hand\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                case \"land\":{\r\n                    const card = state.land[action.payload.index];\r\n                    const land = [...state.land];\r\n                    land.splice(action.payload.index, 1);\r\n                    switch(action.payload.toZone){\r\n                        case \"graveyard\":{\r\n                            const graveyard = [card, ...state.graveyard];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                land\r\n                            }\r\n                        }\r\n                        case \"hand\":{\r\n                            const hand = [...state.graveyard, card];\r\n                            return{\r\n                                ...state,\r\n                                hand,\r\n                                land\r\n                            }\r\n                        }\r\n                        case \"librarytop\":{\r\n                            const library = [card, ...state.library];\r\n                            return{\r\n                                ...state,\r\n                                library,\r\n                                land\r\n                            }\r\n                        }\r\n                        case \"librarybottom\":{\r\n                            const library = [...state.library, card];\r\n                            return{\r\n                                ...state,\r\n                                library,\r\n                                land\r\n                            }\r\n                        }\r\n                        default : return state\r\n                    }\r\n                }\r\n                case \"creatures\":{\r\n                    const creatures = [...state.creatures];\r\n                    creatures.splice(action.payload.index, 1);\r\n\r\n                    return{\r\n                        ...state,\r\n                        creatures\r\n                    }\r\n                }\r\n                case \"library\":{\r\n                    const card = state.library[action.payload.index];\r\n                    const library = [...state.library];\r\n                    library.splice(action.payload.index, 1);\r\n                    switch(action.payload.toZone){\r\n                        case \"graveyard\":{\r\n                            const graveyard = [card, ...state.graveyard];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                library\r\n                            }\r\n                        }\r\n                        case \"hand\":{\r\n                            const hand = [...state.graveyard, card];\r\n                            return{\r\n                                ...state,\r\n                                hand,\r\n                                library\r\n                            }\r\n                        }\r\n                        case \"land\":{\r\n                            const land = [card, ...state.land];\r\n                            return{\r\n                                ...state,\r\n                                library,\r\n                                land\r\n                            }\r\n                        }\r\n                        default : return state;\r\n                    }\r\n                }\r\n                case \"graveyard\":{\r\n                    const card = state.graveyard[action.payload.index];\r\n                    const graveyard = [...state.graveyard];\r\n                    graveyard.splice(action.payload.index, 1);\r\n                    switch(action.payload.toZone){\r\n                        case \"librarytop\":{\r\n                            const library = [card, ...state.library];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                library\r\n                            }\r\n                        }\r\n                        case \"librarybottom\":{\r\n                            const library = [...state.library, card];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                library\r\n                            }\r\n                        }\r\n                        case \"hand\":{\r\n                            const hand = [...state.hand, card];\r\n                            return{\r\n                                ...state,\r\n                                hand,\r\n                                graveyard\r\n                            }\r\n                        }\r\n                        case \"land\":{\r\n                            const land = [...state.land, card];\r\n                            return{\r\n                                ...state,\r\n                                graveyard,\r\n                                land\r\n                            }\r\n                        }\r\n                        default : return state;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        case 'FETCH_CREATURE_TOKEN':{\r\n            return{\r\n                ...state,\r\n                cmc: action.payload\r\n            }\r\n        }\r\n        case \"ADD_CREATURE_TO_BATTLEFIELD\":{\r\n            const creature = {\r\n                name: action.payload.name,\r\n                image: action.payload.image_uris.normal,\r\n                isTapped: false\r\n            }\r\n            const creatures = [...state.creatures, creature];\r\n            return{\r\n                ...state,\r\n                creatures\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n};\r\n\r\nconst initLibrary = (landCount) => {\r\n    \r\n    const library = [];\r\n    \r\n    for (let i = 0; i < landCount.plains; i++){\r\n        library.push({\r\n            name: \"plains\",\r\n            image: `${CardService.plainsImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n    for (let i = 0; i < landCount.islands; i++){\r\n        library.push({\r\n            name: \"island\",\r\n            image: `${CardService.islandImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n    for (let i = 0; i < landCount.swamps; i++){\r\n        library.push({\r\n            name: \"swamp\",\r\n            image: `${CardService.swampImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n    for (let i = 0; i < landCount.mountains; i++){\r\n        library.push({\r\n            name: \"mountain\",\r\n            image: `${CardService.mountainImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n    for (let i = 0; i < landCount.forests; i++){\r\n        library.push({\r\n            name: \"forest\",\r\n            image: `${CardService.forestImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n    for (let i = 0; i < landCount.wastes; i++){\r\n        library.push({\r\n            name: \"wastes\",\r\n            image: `${CardService.wastesImage}`,\r\n            isTapped: false\r\n        })\r\n    }\r\n\r\n    return library;\r\n}\r\n\r\nconst shuffle = (library) => {\r\n            \r\n    let currentIndex = library.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = library[currentIndex];\r\n        library[currentIndex] = library[randomIndex];\r\n        library[randomIndex] = temporaryValue;\r\n    }\r\n    return library;\r\n}\r\n\r\nconst drawCards = (library, numCards) => {\r\n    const drawnCards = library.splice(0, numCards);\r\n    return{\r\n        newLibrary: library,\r\n        drawnCards: drawnCards\r\n    };\r\n}\r\n\r\nexport default{\r\n    reducer,\r\n    initPlayer,\r\n    playLandFromHand,\r\n    drawCardsFromLibrary,\r\n    shuffleLibrary,\r\n    incrementLife,\r\n    decrementLife,\r\n    updateMana,\r\n    toggleTapCard,\r\n    sendCardToZone,\r\n    fetchCreatureToken,\r\n    addCreatureToBattlefield\r\n};","import React, { useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport CardService from '../services/CardService';\r\nimport ImageInput from './ImageInput';\r\nimport LabeledInput from './LabeledInput';\r\nimport PlayerStore from '../stores/PlayerStore';\r\nimport '../css/PlayerSetup.css';\r\n\r\nfunction PlayerSetup(props) {\r\n    \r\n    const [landCount, setLandCount] = useState(\r\n        {\r\n            plains: 0,\r\n            islands: 0,\r\n            swamps: 0,\r\n            mountains: 0,\r\n            forests: 0,\r\n            wastes: 0\r\n        });\r\n    const [playerName, setPlayerName] = useState(\"\");\r\n    \r\n    const onStartGame = () => {\r\n        props.onChange(landCount, playerName);\r\n    }\r\n\r\n    const landInputs = [\r\n        {\r\n            name: \"Plains\",\r\n            image: CardService.wSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, plains: e.target.value}),\r\n        },\r\n        {\r\n            name: \"Islands\",\r\n            image: CardService.uSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, islands: e.target.value}),\r\n        },\r\n        {\r\n            name: \"Swamps\",\r\n            image: CardService.bSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, swamps: e.target.value}),\r\n        },\r\n        {\r\n            name: \"Mountains\",\r\n            image: CardService.rSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, mountains: e.target.value}),\r\n        },\r\n        {\r\n            name: \"Forests\",\r\n            image: CardService.gSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, forests: e.target.value}),\r\n        },\r\n        {\r\n            name: \"Wastes\",\r\n            image: CardService.cSymbolImage,\r\n            onChange: (e) => setLandCount({...landCount, wastes: e.target.value}),\r\n        }\r\n    ]\r\n\r\n    const landInputEls = landInputs.map((x, idx) => {\r\n        return <ImageInput\r\n        imgSrc={x.image}\r\n        imgAlt={x.name}\r\n        inputType=\"number\"\r\n        min=\"0\"\r\n        max=\"60\"\r\n        onChange={x.onChange}\r\n        className=\"mana-symbol\" />\r\n    });\r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"player-setup-header\">Please input your name and the number of lands you would like in your deck (60 total):</div>\r\n            <div className=\"player-setup\">\r\n                <LabeledInput\r\n                labelId=\"playerName\"\r\n                labelText=\"Player Name:\" \r\n                inputType=\"text\"\r\n                onChange={(e) => setPlayerName(e.target.value)}\r\n                className=\"name-input\"/>\r\n                {landInputEls}\r\n            </div>\r\n            <Link to=\"/play\">\r\n                <button type=\"button\" onClick={onStartGame}>Start Game!</button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        onChange: (landCount, playerName) => dispatch(PlayerStore.initPlayer(landCount, playerName))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerSetup);","import React from 'react'\r\nimport PlayerSetup from '../components/PlayerSetup'\r\nimport '../css/Home.css'\r\n\r\nfunction Home(props) {\r\n    return (\r\n        <div className=\"home\">\r\n            <h2>Welcome to Momir Basic</h2>\r\n            <PlayerSetup />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction CardOptionsButton (props) {\r\n    return (\r\n        <button className=\"options-button\" onClick={props.onClick}>\r\n            ...\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default CardOptionsButton;","import React from 'react';\r\nimport CardOptionsButton from './CardOptionsButton';\r\n\r\nfunction Card(props) {\r\n\r\n    const handleCardClick = () => {\r\n        props.onCardClick(props.index, props.zone)\r\n    }\r\n    const handleOptionsClick = () => {\r\n        props.onOptionsClick(props.index, props.zone)\r\n    }\r\n\r\n    return (\r\n        <div className={\"card\" + (props.isTapped ? \" tapped\" : \"\")}>\r\n            <CardOptionsButton zone={props.zone} onClick={handleOptionsClick}/>\r\n            <img src={props.imgSrc} alt={props.name} onClick={handleCardClick}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport CardService from '../services/CardService';\r\nimport Card from './Card';\r\n\r\nfunction CardStack(props){\r\n    let topImage = undefined;\r\n    if(props.contents.length > 0){\r\n        topImage = props.isTopRevealed ? props.contents[0].image : CardService.cardBackImage;\r\n    }\r\n    return(\r\n        <div>\r\n            <Card \r\n                imgSrc={topImage}\r\n                alt={props.name}\r\n                zone={props.name}\r\n                index=\"0\"\r\n                name={props.contents.length > 0 ? props.contents[0].name : \"\"}\r\n                onCardClick={props.contents.length > 0 ? props.onClick : () => { return }}\r\n                onOptionsClick={props.contents.length > 0 ? props.onOptionsClick : () => { return }}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardStack;","import React from 'react';\r\n\r\nfunction CardZone(props){\r\n    return(\r\n        <div className={\"cardZone \"+props.name}>{props.cards}</div>\r\n    );\r\n}\r\n\r\nexport default CardZone;","import React from 'react'\r\n\r\nfunction Heart(props){\r\n    return(\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width={props.width} height={props.height} viewBox=\"0 0 200 200\">\r\n            <path d=\"M65 29c-6-10-16-17-28-17C20 12 7 25 7 42c0 33 18 38 58 76 40-38 58-43 58-76 0-17-13-30-30-30-12 0-22 7-28 17z\" fill={props.color}/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default Heart;","import React from 'react'\r\n\r\nfunction UpTriangle(props){\r\n    return(\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={props.width}\r\n        height={props.height}\r\n        fill={props.color}\r\n        viewBox=\"0 0 481.72 481.721\">\r\n            <path d=\"M471.253 335.129L272.396 82.226c-17.417-30.533-45.661-30.533-63.078 0L10.473 335.098c-3.88 5.533-8.072 15.41-8.917 22.117-2.736 21.738-4.908 65.18 21.444 65.18h435.707c26.353 0 24.192-43.416 21.463-65.148-.844-6.714-5.031-16.579-8.917-22.118z\"/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default UpTriangle;\r\n","import React from 'react'\r\n\r\nfunction DownTriangle(props){\r\n    return(\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={props.width}\r\n        height={props.height}\r\n        fill = {props.color}\r\n        viewBox=\"0 0 481.728 481.728\">\r\n            <path d=\"M10.467 146.592l198.857 252.903c17.417 30.532 45.661 30.532 63.085 0l198.839-252.867c3.886-5.532 8.072-15.41 8.923-22.118 2.735-21.738 4.908-65.178-21.444-65.178H23.013c-26.353 0-24.192 43.415-21.463 65.147.845 6.709 5.037 16.581 8.917 22.113z\"/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default DownTriangle;","import React from 'react';\r\nimport Heart from './icons/Heart';\r\nimport UpTriangle from './icons/UpTriangle';\r\nimport DownTriangle from './icons/DownTriangle';\r\n\r\nfunction LifeTracker (props){\r\n    return (\r\n        <div className=\"life-tracker-container\">\r\n            <div className=\"life-display\">\r\n                <Heart width=\"160\" height=\"160\" color=\"#ff0707\"/>\r\n                <div className=\"life-display-text\">\r\n                    {props.lifeTotal}\r\n                </div>\r\n            </div>\r\n            <div className=\"life-button-container\">\r\n                <button onClick={props.onLifeIncrementClick}>\r\n                    <UpTriangle width=\"40\" height=\"40\" color=\"white\"/>\r\n                </button>\r\n                <button onClick={props.onLifeDecrementClick}>\r\n                    <DownTriangle width=\"40\" height=\"40\" color=\"white\"/>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LifeTracker;","import React from 'react';\r\nimport UpTriangle from './icons/UpTriangle';\r\nimport DownTriangle from './icons/DownTriangle';\r\n\r\nfunction ManaTracker(props){\r\n    return (\r\n        <div className=\"mana-tracker-container\">\r\n            \r\n            <button className=\"mana-tracker-button\" onClick={props.onIncrementClick}>\r\n                <UpTriangle width=\"25\" height=\"25\" color=\"white\"/>\r\n            </button>\r\n            <div className=\"mana-count-container\">\r\n                <img src={props.manaIcon} />\r\n                <div className=\"mana-count\">\r\n                    {props.manaCount}\r\n                </div>\r\n            </div>\r\n            <button className=\"mana-tracker-button\" onClick={props.onDecrementClick}>\r\n                <DownTriangle width=\"25\" height=\"25\" color=\"white\"/>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ManaTracker;","import React from 'react';\r\nimport CardService from '../services/CardService';\r\nimport ManaTracker from './ManaTracker';\r\n\r\nfunction ManaPool(props){\r\n\r\n    const incrementMana = (color) => {\r\n        let manaUpdate = {};\r\n        manaUpdate[color] = props[color] + 1;\r\n        props.onUpdateMana(manaUpdate);\r\n    }\r\n\r\n    const decrementMana = (color) => {\r\n        let manaUpdate = {};\r\n        manaUpdate[color] = Math.max(0, props[color] - 1);\r\n        props.onUpdateMana(manaUpdate);\r\n    }\r\n\r\n    const clearMana = () => {\r\n        let manaUpdate = {\r\n            white: 0,\r\n            blue: 0,\r\n            black: 0,\r\n            red: 0,\r\n            green: 0,\r\n            colorless: 0\r\n        }\r\n        props.onUpdateMana(manaUpdate);\r\n    }\r\n\r\n    return(\r\n        <div className=\"mana-pool-container\">\r\n            <ManaTracker manaIcon={CardService.wSymbolImage} manaCount={props.white} onIncrementClick={() => incrementMana(\"white\")} onDecrementClick={() => decrementMana(\"white\")}/>\r\n            <ManaTracker manaIcon={CardService.uSymbolImage} manaCount={props.blue} onIncrementClick={() => incrementMana(\"blue\")} onDecrementClick={() => decrementMana(\"blue\")}/>\r\n            <ManaTracker manaIcon={CardService.bSymbolImage} manaCount={props.black} onIncrementClick={() => incrementMana(\"black\")} onDecrementClick={() => decrementMana(\"black\")}/>\r\n            <ManaTracker manaIcon={CardService.rSymbolImage} manaCount={props.red} onIncrementClick={() => incrementMana(\"red\")} onDecrementClick={() => decrementMana(\"red\")}/>\r\n            <ManaTracker manaIcon={CardService.gSymbolImage} manaCount={props.green} onIncrementClick={() => incrementMana(\"green\")} onDecrementClick={() => decrementMana(\"green\")}/>\r\n            <ManaTracker manaIcon={CardService.cSymbolImage} manaCount={props.colorless} onIncrementClick={() => incrementMana(\"colorless\")} onDecrementClick={() => decrementMana(\"colorless\")}/>\r\n            <button onClick={() => clearMana()}>CLEAR</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManaPool;","import React, { useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Modal from 'react-modal';\r\n\r\nimport Card from './Card';\r\nimport CardStack from './CardStack';\r\nimport CardZone from './CardZone';\r\nimport LifeTracker from './LifeTracker';\r\nimport ManaPool from './ManaPool';\r\nimport PlayerStore from '../stores/PlayerStore';\r\n\r\nimport '../css/PlayerInterface.css';\r\nimport CardService from '../services/CardService';\r\n\r\nfunction PlayerInterface (props) {\r\n\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n    const [selectedCardIndex, setSelectedCardIndex] = useState(0);\r\n    const [selectedCardZone, setSelectedCardZone] = useState('');\r\n    const [selectedCmc, setSelectedCmc] = useState(0);\r\n\r\n    const onLifeIncrementClick = () => {\r\n        props.onIncrementLife();\r\n    }\r\n\r\n    const onLifeDecrementClick = () => {\r\n        props.onDecrementLife();\r\n    }\r\n\r\n    const onUpdateMana = (newMana) => {\r\n        props.onUpdateMana(newMana);\r\n    }\r\n\r\n    const playLand = (index) => {\r\n        props.onPlayLand(index);\r\n    }\r\n\r\n    const drawCard = () =>{\r\n        props.onDrawCard();\r\n    }\r\n\r\n    const toggleTap = (index, zone) => {\r\n        props.onToggleTap(index, zone);\r\n    }\r\n\r\n    const onOptionsClick = (index, zone) => {\r\n        setSelectedCardIndex(index);\r\n        setSelectedCardZone(zone);\r\n        setModalIsOpen(true);\r\n    }\r\n\r\n    const onCloseModal = () => {\r\n        setModalIsOpen(false);\r\n    }\r\n\r\n    const sendCardTo = (destination) => {\r\n        props.sendCardToZone(selectedCardIndex, selectedCardZone, destination);\r\n        setModalIsOpen(false);\r\n    }\r\n\r\n    const fetchTokenCreature = () => {\r\n        props.fetchCreatureToken(selectedCmc);\r\n    }\r\n\r\n    const handEls = props.hand.map((x, idx) => {\r\n        if(x !== undefined)\r\n            return <Card key={idx} index={idx} imgSrc={x.image} name={x.name} zone=\"hand\" onCardClick={playLand} isTapped={x.isTapped} onOptionsClick={onOptionsClick}/>\r\n    })\r\n    const creatureEls = props.creaturesInPlay.map((x, idx) => {\r\n        if(x !== undefined)\r\n           return <Card key={idx} index={idx} imgSrc={x.image} name={x.name} zone=\"creatures\" onCardClick={toggleTap} isTapped={x.isTapped} onOptionsClick={onOptionsClick}/>\r\n    })\r\n    const landEls = props.landInPlay.map((x, idx) => {\r\n        if(x !== undefined)\r\n           return <Card key={idx} index={idx} imgSrc={x.image} name={x.name} zone=\"land\" onCardClick={toggleTap} isTapped={x.isTapped} onOptionsClick={onOptionsClick}/>\r\n    })\r\n\r\n    return (\r\n        <div id=\"playerInterface\" className=\"playerInterface\">\r\n            <Modal \r\n            isOpen={modalIsOpen}\r\n            appElement={document.getElementById('playerInterface')}\r\n            className=\"card-options-modal\"\r\n            overlayClassName=\"card-options-overlay\"\r\n            >\r\n                <div className=\"modal-button-container\">\r\n                    Send card to...\r\n                    <button className={selectedCardZone === \"graveyard\" ? \"hidden\" : \"\"} onClick={() => sendCardTo(\"graveyard\")}>Graveyard</button>\r\n                    <button className={selectedCardZone === \"hand\" ? \"hidden\" : \"\"} onClick={() => sendCardTo(\"hand\")}>Hand</button>\r\n                    <button className={selectedCardZone === \"library\" ? \"hidden\" : \"\"} onClick={() => sendCardTo(\"librarytop\")}>Top of Library</button>\r\n                    <button className={selectedCardZone === \"library\" ? \"hidden\" : \"\"} onClick={() => sendCardTo(\"librarybottom\")}>Bottom of Library</button>\r\n                    <button className={selectedCardZone === \"land\" || selectedCardZone == \"creatures\"? \"hidden\" : \"\"} onClick={() => sendCardTo(\"land\")}> Battlefield</button>\r\n                    <br />\r\n                    <button onClick={onCloseModal}>Close</button>\r\n                </div>\r\n            </Modal>\r\n            <div className=\"battlefield\">\r\n                <CardZone cards={creatureEls} name=\"battlefield-creatures\"/>\r\n                <div className=\"land-row-container\">\r\n                    <div className=\"card momir-container\">\r\n                        <img src={CardService.momirAvatarImage} />\r\n                        <div className=\"momir-input-container\">\r\n                            <div className=\"momir-rules\">\r\n                                <span>X, Discard a card:</span>\r\n                                <br />\r\n                                <span>Create a token that’s a copy of a creature card with converted mana cost X chosen at random. Activate this ability only any time you could cast a sorcery and only once each turn.</span>\r\n                            </div>\r\n                            <div className=\"momir-input\">\r\n                                <span>X:</span>\r\n                                <input type=\"number\" min=\"0\" onChange={(e) => setSelectedCmc(e.target.value)}></input>\r\n                                <button onClick={fetchTokenCreature}>Create Token!</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <CardZone cards={landEls} name=\"battlefield-land\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"playerSpace\">\r\n                <div className=\"playerStats\">\r\n                    <LifeTracker\r\n                        lifeTotal={props.lifeTotal}\r\n                        onLifeIncrementClick = {onLifeIncrementClick}\r\n                        onLifeDecrementClick = {onLifeDecrementClick}\r\n                    />\r\n                    <ManaPool\r\n                        white={props.manaPool.white}\r\n                        blue={props.manaPool.blue}\r\n                        black={props.manaPool.black}\r\n                        red={props.manaPool.red}\r\n                        green={props.manaPool.green}\r\n                        colorless={props.manaPool.colorless}\r\n                        onUpdateMana={onUpdateMana}/>\r\n                </div>\r\n                <CardZone name=\"hand\" cards={handEls}/>\r\n                <CardStack name=\"library\" contents={props.library} isTopRevealed={false} onClick={drawCard} onOptionsClick={onOptionsClick}/>\r\n                <CardStack name=\"graveyard\" contents={props.graveyard} isTopRevealed={true} onClick={onOptionsClick} onOptionsClick={onOptionsClick}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        playerName: store.player.playerName,\r\n        hand: store.player.hand,\r\n        library: store.player.library,\r\n        graveyard: store.player.graveyard,\r\n        creaturesInPlay: store.player.creatures,\r\n        landInPlay: store.player.land,\r\n        lifeTotal: store.player.lifeTotal,\r\n        manaPool: store.player.manaPool\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onIncrementLife: () => dispatch(PlayerStore.incrementLife()),\r\n        onDecrementLife: () => dispatch(PlayerStore.decrementLife()),\r\n        onUpdateMana: (mana) => dispatch(PlayerStore.updateMana(mana)),\r\n        onPlayLand: (index) => dispatch(PlayerStore.playLandFromHand(index)),\r\n        onDrawCard: () => dispatch(PlayerStore.drawCardsFromLibrary(1)),\r\n        onToggleTap: (index, zone) => dispatch(PlayerStore.toggleTapCard(index, zone)),\r\n        sendCardToZone: (index, fromZone, toZone) => dispatch(PlayerStore.sendCardToZone(index, fromZone, toZone)),\r\n        fetchCreatureToken: (cmc) => dispatch(PlayerStore.fetchCreatureToken(cmc))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerInterface);","import React from 'react'\r\nimport PlayerInterface from '../components/PlayerInterface';\r\n\r\nfunction Play(props) {\r\n    return (\r\n        <div>\r\n            <PlayerInterface />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Play;","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport Home from './pages/Home';\nimport Play from './pages/Play';\n\nfunction App() {\n  return (\n    <div id=\"App\" className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/play\">\n            <Play />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {call, put, takeEvery} from 'redux-saga/effects';\r\nimport CardService from '../services/CardService';\r\n\r\nconst cardService = new CardService();\r\n\r\nfunction* fetchCreatureToken(action) {\r\n    try{\r\n        const creatureToken = yield call(cardService.getRandomCreature, action.payload);\r\n        yield put({type: 'ADD_CREATURE_TO_BATTLEFIELD', payload: creatureToken})\r\n    } catch(e){\r\n        console.error('ERROR FETCHING CREATURE TOKEN!!!');\r\n    }\r\n}\r\n\r\nfunction* creatureTokenSaga(){\r\n    yield takeEvery('FETCH_CREATURE_TOKEN', fetchCreatureToken);\r\n}\r\n\r\nexport default creatureTokenSaga;","\r\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport PlayerStore from './PlayerStore';\r\n \r\nimport createSagaMiddleware from 'redux-saga';\r\nimport PlayerSaga from '../sagas/PlayerSaga';\r\n \r\nconst sagaMiddleware = createSagaMiddleware();\r\n \r\nconst store = createStore(\r\n    combineReducers({\r\n        player: PlayerStore.reducer\r\n    }),\r\n    applyMiddleware(sagaMiddleware)\r\n);\r\n \r\nsagaMiddleware.run(PlayerSaga);\r\n \r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {Provider} from 'react-redux';\nimport store from './stores/store';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}